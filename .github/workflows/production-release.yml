name: Production Release
concurrency: production-release
on:
    schedule:
        - cron: "0 */8 * * *"
    push:
        branches:
            - main

jobs:
    build:
        name: Build and Deploy to Production
        runs-on: ubuntu-22.04
        steps:
            - uses: actions/checkout@v4

            - run: make all
              env:
                  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
                  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
                  NEXT_PUBLIC_URL: https://${{ secrets.PRODUCTION_HOSTNAME }}/
                  NEXT_PUBLIC_SENTRY_DSN: ${{ secrets.SENTRY_DSN }}
                  SENTRY_ORG: ${{ secrets.SENTRY_ORG }}
                  SENTRY_PROJECT: ${{ secrets.SENTRY_PROJECT }}
                  SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}

            - name: Deploy to the production bucket
              run: cd deployment && npm ci && npm run start
              env:
                  DEPLOYMENT_CF_BUCKET: ${{ secrets.PRODUCTION_CF_BUCKET }}
                  DEPLOYMENT_CF_ACCOUNT_ID: ${{ secrets.DEPLOYMENT_CF_ACCOUNT_ID }}
                  DEPLOYMENT_CF_AWS_ACCESS_KEY_ID: ${{ secrets.PRODUCTION_CF_AWS_ACCESS_KEY_ID }}
                  DEPLOYMENT_CF_AWS_SECRET_ACCESS_KEY: ${{ secrets.PRODUCTION_CF_AWS_SECRET_ACCESS_KEY }}

            - uses: cloudflare/wrangler-action@v3
              with:
                  apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}
                  accountId: ${{ secrets.DEPLOYMENT_CF_ACCOUNT_ID }}
                  wranglerVersion: "4.15.0"

            - name: Clear cloudflare cache
              run: |
                  curl -X POST "https://api.cloudflare.com/client/v4/zones/${{ secrets.PRODUCTION_CF_ZONE_ID }}/purge_cache" \
                  -H "Authorization: Bearer ${{ secrets.CLOUDFLARE_API_TOKEN }}" \
                  -H "Content-Type: application/json" \
                  --data '{"hosts":["${{ secrets.PRODUCTION_HOSTNAME }}"]}'

            - name: Success Slack Notify
              if: ${{ success() }}
              uses: slackapi/slack-github-action@v1.16.0
              with:
                  payload: '{"blocks":[{"type":"section","text":{"type":"mrkdwn","text":":rocket: **${{ env.SERVICE }}** deployed. ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"}}]}'
              env:
                  SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
                  SLACK_WEBHOOK_TYPE: INCOMING_WEBHOOK
                  SERVICE: ec2instances-production

            - name: Failure Slack Notify
              if: ${{ failure() }}
              uses: slackapi/slack-github-action@v1.16.0
              with:
                  payload: '{"blocks":[{"type":"section","text":{"type":"mrkdwn","text":":see_no_evil: **${{ env.SERVICE }}** wasn''t deployed. ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"}}]}'
              env:
                  SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
                  SLACK_WEBHOOK_TYPE: INCOMING_WEBHOOK
                  SERVICE: ec2instances-production
